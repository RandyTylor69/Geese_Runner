 public Hexagon findBest(Hexagon cell) {

        Hexagon bestCell = null;
        boolean selected  = false; // created purely to distinguish two cells with 0 adjacent goose cells

        for (int i = 0; i<=5; i++) {

            Hexagon nextCell = cell.getNeighbour(i);

            // check 0: not null cell
            if (nextCell != null) {

                System.out.println();

                System.out.println("  checking cell number" + nextCell.getID());

                // check 1: not goose cell
                if (!nextCell.isGooseCell()) {

                    // check 2: goose count < 3
                    if (neighbourGooseCount(nextCell) < 3 || nextCell.isEnd()) {

                        // check 3: not marked cell
                        if (!nextCell.isMarked()) {


                            // 3.1
                            if (nextCell.isEnd()) { return nextCell; }

                            // 3.2
                            else if (nextCell.isBookCell()) {
                                for (int j = 0; j <= 5; j++) {
                                    Hexagon neighbourCell = cell.getNeighbour(j);
                                    if (neighbourCell!=null && neighbourCell.isBookCell()) {
                                        bestCell = neighbourCell;
                                    }
                                }
                                System.out.println("(book cell check) cell number " + bestCell.getID() + " is returned");
                                return bestCell;
                            }


                            // 3.3
                            else if (nextCell.isGrassCell()) {

                                int gooseCount = 6; // max allowed gooseCount on a cell + 1

                                for (int j = 0; j <= 5; j++) { // looping through curr's neighbours

                                    if (cell.getNeighbour(j) != null) {

                                        Hexagon neighbourCell = cell.getNeighbour(j);

                                        // checking if neighbour is end cell
                                        if (neighbourCell.isEnd() && !selected) {
                                            bestCell = neighbourCell;
                                            System.out.println("end cell detected: number " + bestCell.getID());
                                            selected = true;
                                        }

                                        // checking if neighbour is book cell
                                        else if (neighbourCell.isBookCell() && !selected) {
                                            bestCell = neighbourCell;
                                            System.out.println("book cell checking: number" + neighbourCell.getID());
                                            selected = true;
                                        }

                                        else if (neighbourGooseCount(neighbourCell) < gooseCount
                                    && neighbourCell.isGrassCell()) {
                                            System.out.println("best grass cell checking: number " + neighbourCell.getID() + "(has " + neighbourGooseCount(neighbourCell) + " goose neighbors)");

                                            if (neighbourGooseCount(neighbourCell) == 0 && !selected) {
                                                bestCell = neighbourCell;
                                                selected = true;
                                            } else if (neighbourGooseCount(neighbourCell) != 0){
                                                bestCell = neighbourCell;
                                            }
                                        }
                                    }
                                }

                               System.out.println("(grass cell check) cell number " + bestCell.getID() + " is returned");
                                return bestCell;
                            }

                            // 3.4
                            else if (nextCell.isSnowCell()) {

                                int gooseCount = 6;

                                // checking if there are remaining grass / book // end cells as neighbours. prioritize them.
                                for (int j = 0; j <= 5; j++) {
                                    Hexagon neighbourCell = cell.getNeighbour(j);
                                    if (neighbourCell!=null) {

                                        // checking if neighbour is end cell
                                        if (neighbourCell.isEnd() && !selected) {
                                            bestCell = neighbourCell;
                                            System.out.println("end cell detected: number " + bestCell.getID());
                                            selected = true;
                                        }

                                        // checking if neighbour is book cell
                                        else if (neighbourCell.isBookCell() && !selected) {
                                            bestCell = neighbourCell;
                                            System.out.println("book cell checking: number" + neighbourCell.getID());
                                            selected = true;
                                        }

                                        //checking if neighbour is grass cell
                                        else if (neighbourGooseCount(neighbourCell) < gooseCount
                                                && neighbourCell.isGrassCell() && !selected) {
                                            System.out.println("best grass cell checking: number " + neighbourCell.getID() + "(has " + neighbourGooseCount(neighbourCell) + " goose neighbors)");

                                            if (neighbourGooseCount(neighbourCell) == 0) {
                                                bestCell = neighbourCell;
                                                selected = true;
                                            } else if (neighbourGooseCount(neighbourCell) != 0){
                                                bestCell = neighbourCell;
                                            }
                                        }
                                    }
                                }

                                for (int j = 0; j <= 5; j++) {
                                    Hexagon neighbourCell = cell.getNeighbour(j);

                                    if (neighbourCell!=null && neighbourCell.isSnowCell() && !selected) {
                                            System.out.println("best snow cell checking: number " + neighbourCell.getID());
                                            bestCell = neighbourCell;
                                            selected = true;
                                    }

                                }
                                System.out.println("(snow cell check) cell number " + bestCell.getID() + " is returned");
                                return bestCell;
                            }

                        }
                    }
                }
            }
        }

        return null;
    }